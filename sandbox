#!/usr/bin/env perl

# A "safe" proxy for a python3 executable.
#
# Note: probably very unsafe. Take additional measures to secure your
# deployment.
#
# Run -h for help / usage.
#
# Constraints:
# - Python output (yes, even errors) should exclusively happen on STDOUT
# - STDERR is supposed to be the place for errors in *this* script

# Pragmas
use strict;
use warnings;
use 5.26.0;



# = IMPORTS =

# Perl standard library
use File::Temp qw();
use Getopt::Long qw(GetOptions);
use Time::HiRes qw();

# External modules
use Capture::Tiny qw(capture_merged);
use IPC::Run qw(run timeout);
use JSON::XS qw(decode_json encode_json);

# Config
unless (exists $ENV{HULKS_RECRUITING_CONFIG}) {
  die "Missing environment variable: HULKS_RECRUITING_CONFIG\n";
}

my $CONFIG = do "$ENV{HULKS_RECRUITING_CONFIG}";

# Constants
my @REAL_PYTHON = @{ $CONFIG->{sandbox}->{interpreter} };
my $PYTHON_TIMEOUT = $CONFIG->{sandbox}->{timeout};



# = REGEXES FOR UNDERSTANDING PYTHON SUFFICIENTLY =

# Start of a line
my $PY_START_LINE = qr{
    ^
    \s*?      # It's ok to have some whitespace
    (?=[^\#]) # Ignore comments (TODO: also handle docstrings?)
    .*?       # Don't care what comes here
}xm;

# Banned functions
# Watch out for new functions:
# https://docs.python.org/3.7/library/functions.html
my $PYx_BANNED_FUNCTIONS = qr{
    (?<MATCH_BANNED>
    classmethod | compile | delattr | dir |
    eval | exec | getattr | globals | hasattr |
    help | id | input | isinstance | issubclass |
    locals | memoryview | open | setattr | vars |
    __.*?__
)}x;

# Banned statements
my $PYx_BANNED_STATEMENTS = qr{
    (?<MATCH_BANNED>
    import
)}x;

# = MISC / UTILITY FUNCTIONS =

# Self-explanatory.
sub print_usage {
  print <<"EOF";
Usage:
    $0 --script=<path> [ --prologue=<path> | --epilogue=<path> ]
    $0 [ -h | --help ]
EOF
}

# Take string, add time +  newline, print to STDERR
sub debug {
  my $t = Time::HiRes::time;
  print STDERR "\@$t: $_\n" for @_;
}

# Takes a string and turns it into a JSON
# response that is structually similar to
# the one emitted in epilogue.py (ewgh!)
# Is useful in situations where Python died, etc.
sub make_json_response {

  my $stdout = shift;

  return encode_json {
    ball => {x => '0', y => '0'},
    stdout => $stdout
  };
}

# Takes a string and prints a fake
# NameError that looks just like Python's.
sub fake_name_error {

  my $identifier = shift;

  print STDOUT make_json_response(
    "NameError: name '$identifier' is not defined");
  exit -1;
}

# Takes a string as filename. Reads the
# file as UTF-8 and returns the result.
sub slurp_utf8 {

  my $fn = shift;

  local $/ = undef;

  open(my $fh, '<:encoding(UTF-8)', $fn)
      or die "Could not open file $fn: $!";
  my $data = <$fh>;
  close($fh)
      or die "Could not close file $fn: $!";

  return $data;
}

# = PYTHON PARSING FACILITIES =

# Check for banned functions in user input.
# Fakes a NameError if necessary.
sub py_ban_functions {

  my $py = shift;

  my $forbidden = qr{
      ( # Maybe this is a decorator?
        $PY_START_LINE
        @ # decorator
        $PYx_BANNED_FUNCTIONS
      |
        $PY_START_LINE
        \b # prevent matches like ｢evaluate()｣
          $PYx_BANNED_FUNCTIONS
        \b
      )
  }xm;

  if ($py =~ $forbidden) {
    fake_name_error($+{MATCH_BANNED});
  }

  return $py;
}

# Check for banned statements in user input.
# Fakes a NameError if necessary.
sub py_ban_statements {

  my $py = shift;

  my $forbidden = qr{
      $PY_START_LINE

      \b # prevent matches like ｢my_import_func｣
        $PYx_BANNED_STATEMENTS
      \b
  }xm;

  if ($py =~ $forbidden) {
    fake_name_error($+{MATCH_BANNED});
  }

  return $py;

}

# "Rewrites" the Python script.
# (Actually, it only checks for banned functions
#  and statements and does not rewrite anything.)
sub py_rewrite_script {

  my $py_unsafe = shift;

  local $_ = $py_unsafe;

  $_ = py_ban_functions  $_;
  $_ = py_ban_statements $_;

  return $_;
}

# = MAIN FUNCTION =

# Sigh.
sub main {

  # ... make Perl 21st-Century-compatible
  binmode(STDIN,  ':encoding(UTF-8)');
  binmode(STDOUT, ':encoding(UTF-8)');
  binmode(STDERR, ':encoding(UTF-8)');

  # ... parse arguments

  my ($arg_script, $arg_prologue, $arg_epilogue, $arg_help);

  GetOptions('script=s'   => \$arg_script,
             'prologue=s' => \$arg_prologue,
             'epilogue=s' => \$arg_epilogue,
             'h|help'     => \$arg_help)
      or print "\n" and print_usage and exit;

  if ($arg_help) {
    print_usage;
    exit;
  }

  unless (defined $arg_script) {
    die "Missing argument: --script\n";
  }

  # ... read unsafe script and check for validity

  my $py_unsafe = slurp_utf8($arg_script);

  my $py_safe = py_rewrite_script($py_unsafe);

  # ... write a "clean" (read: not evil) Python script that is going to
  #     be executed by the real Python interpreter
  # ... merge prologue and epilogue if specified via CLI arguments

  my $temp_safe = File::Temp->new;
  $temp_safe->unlink_on_destroy(1);
  binmode($temp_safe, ':encoding(UTF-8)');

  print $temp_safe slurp_utf8($arg_prologue) . "\n"
      if defined $arg_prologue;
  print $temp_safe $py_safe . "\n";
  print $temp_safe slurp_utf8($arg_epilogue) . "\n"
      if defined $arg_epilogue;

  close($temp_safe) or die "Could not close tempfile: $!";

  my $status;
  my @cmd = (@REAL_PYTHON => $temp_safe->filename);

  my $output;
  eval {
    # ... run real Python interpreter
    run \@cmd, '>&', \$output, timeout($PYTHON_TIMEOUT);
  };

  # ... handle the results
  if (my $e = $@) {
    # There was an error!

    if ($e =~ /IPC::Run: timeout/) {
      # Timeout, script took too long to execute!

      print STDOUT make_json_response(
        "Python interpreter timed out, please try again");
    } else {
      # This can be anything, so let's print to STDERR.
      # TODO: turn this into a log
      print STDERR $e;
    }
  } else {
    # There was no error, and Python did return *something* useful.

    eval {
      # Did Python return a valid JSON structure?
      decode_json($output)
    };
    if ($@) {
      # It did not, and probably died with an error.

      # ... strip Python's /File "foo", line 60/
      $output =~ s/^\s*File (.*?), line (.*)?\n//;

      # ... respond with style.
      print STDOUT make_json_response($output);
    } else {
      # This is probably a valid response, just return it!
      print STDOUT $output;
    }
  }
}

main;
